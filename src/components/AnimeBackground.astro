---
// 二次元風格背景動畫組件
const generateRandomStyle = () => {
  const left = Math.random() * 100;
  const top = Math.random() * 100;
  const delay = Math.random() * 10;
  const duration = 10 + Math.random() * 10;
  return `left: ${left}%; top: ${top}%; animation-delay: ${delay}s; animation-duration: ${duration}s;`;
};

const generateTwinkleStyle = () => {
  const left = Math.random() * 100;
  const top = Math.random() * 100;
  const delay = Math.random() * 5;
  const duration = 3 + Math.random() * 4;
  return `left: ${left}%; top: ${top}%; animation-delay: ${delay}s; animation-duration: ${duration}s;`;
};

const generateBubbleStyle = () => {
  const left = Math.random() * 100;
  const top = Math.random() * 100;
  const delay = Math.random() * 8;
  const duration = 15 + Math.random() * 10;
  return `left: ${left}%; top: ${top}%; animation-delay: ${delay}s; animation-duration: ${duration}s;`;
};
---

<div id="anime-background" class="fixed inset-0 pointer-events-none z-0 overflow-hidden">
  <!-- 浮動的櫻花花瓣 -->
  <div class="absolute inset-0">
    {Array.from({ length: 20 }).map((_, i) => (
      <div 
        class="absolute w-2 h-2 bg-gradient-to-br from-pink-300 to-pink-500 rounded-full opacity-60 animate-float"
        style={generateRandomStyle()}
      ></div>
    ))}
  </div>

  <!-- 浮動的星星 -->
  <div class="absolute inset-0">
    {Array.from({ length: 15 }).map((_, i) => (
      <div 
        class="absolute w-1 h-1 bg-yellow-300 rounded-full opacity-80 animate-twinkle"
        style={generateTwinkleStyle()}
      ></div>
    ))}
  </div>

  <!-- 浮動的氣泡 -->
  <div class="absolute inset-0">
    {Array.from({ length: 12 }).map((_, i) => (
      <div 
        class="absolute w-3 h-3 bg-gradient-to-br from-cyan-300/40 to-blue-400/40 rounded-full animate-bubble"
        style={generateBubbleStyle()}
      ></div>
    ))}
  </div>

  <!-- 光暈效果 -->
  <div class="absolute top-1/4 left-1/4 w-64 h-64 bg-gradient-to-br from-purple-400/10 via-pink-400/10 to-cyan-400/10 rounded-full blur-3xl animate-pulse"></div>
  <div class="absolute bottom-1/4 right-1/4 w-96 h-96 bg-gradient-to-br from-blue-400/10 via-indigo-400/10 to-purple-400/10 rounded-full blur-3xl animate-pulse" style="animation-delay: 2s;"></div>
  <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-br from-pink-400/5 via-rose-400/5 to-orange-400/5 rounded-full blur-3xl animate-pulse" style="animation-delay: 4s;"></div>

  <!-- 動態網格背景 -->
  <div class="absolute inset-0 opacity-5">
    <div class="absolute inset-0" style="background-image: radial-gradient(circle at 1px 1px, rgba(255,255,255,0.3) 1px, transparent 0); background-size: 50px 50px;"></div>
  </div>
</div>

<style>
  @keyframes float {
    0%, 100% {
      transform: translateY(0px) rotate(0deg);
      opacity: 0.6;
    }
    25% {
      transform: translateY(-20px) rotate(90deg);
      opacity: 0.8;
    }
    50% {
      transform: translateY(-40px) rotate(180deg);
      opacity: 0.4;
    }
    75% {
      transform: translateY(-20px) rotate(270deg);
      opacity: 0.8;
    }
  }

  @keyframes twinkle {
    0%, 100% {
      opacity: 0.3;
      transform: scale(1);
    }
    50% {
      opacity: 1;
      transform: scale(1.2);
    }
  }

  @keyframes bubble {
    0% {
      transform: translateY(100vh) scale(0);
      opacity: 0;
    }
    10% {
      opacity: 0.8;
    }
    90% {
      opacity: 0.8;
    }
    100% {
      transform: translateY(-100px) scale(1);
      opacity: 0;
    }
  }

  .animate-float {
    animation: float linear infinite;
  }

  .animate-twinkle {
    animation: twinkle ease-in-out infinite;
  }

  .animate-bubble {
    animation: bubble linear infinite;
  }
</style>

<script>
  // 動態調整背景元素數量
  function adjustBackgroundElements() {
    const isMobile = window.innerWidth < 768;
    const animeBackground = document.getElementById('anime-background');
    
    if (!animeBackground) return;
    
    // 根據螢幕大小調整元素數量
    const floatElements = animeBackground.querySelectorAll('.animate-float');
    const twinkleElements = animeBackground.querySelectorAll('.animate-twinkle');
    const bubbleElements = animeBackground.querySelectorAll('.animate-bubble');
    
    if (isMobile) {
      // 移動端減少元素數量以提升性能
      floatElements.forEach((el, index) => {
        if (index > 10) el.style.display = 'none';
      });
      twinkleElements.forEach((el, index) => {
        if (index > 8) el.style.display = 'none';
      });
      bubbleElements.forEach((el, index) => {
        if (index > 6) el.style.display = 'none';
      });
    }
  }

  // 頁面載入時調整
  document.addEventListener('DOMContentLoaded', adjustBackgroundElements);
  
  // 視窗大小改變時調整
  window.addEventListener('resize', adjustBackgroundElements);
</script>
